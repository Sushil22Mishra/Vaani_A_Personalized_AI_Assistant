from query import *
from database_route import insert_user, get_user_by_name

import os
import webbrowser
from fastapi import FastAPI, Request, HTTPException, UploadFile, File, Form
from fastapi.responses import JSONResponse, FileResponse, RedirectResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import bcrypt
from pydantic import BaseModel
import mysql.connector
import uvicorn

# Initialize FastAPI app
app = FastAPI()

# CORS middleware to handle cross-origin requests
origins = ["*"]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Set up static files and templates
app.mount("/static", StaticFiles(directory="template/static"), name="static")
template_folder_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'template')
templates = Jinja2Templates(directory=template_folder_path)

# Model for receiving user data
class UserRegister(BaseModel):
    name: str
    password: str
    profile_pic: str  # Base64 image string

# Model for receiving login data
class UserLogin(BaseModel):
    name: str
    password: str

@app.get("/")
async def index(request: Request):
    return templates.TemplateResponse("home.html", {"request": request})  # Serve home.html

@app.get("/services")
async def services_page(request: Request):
    return templates.TemplateResponse("services.html", {"request": request})  # Serve services.html

@app.get("/login")
async def login_page(request: Request):
    return templates.TemplateResponse("login.html", {"request": request})  # Serve login.html

@app.post("/login")
async def login_user(user: UserLogin):
    db_user = get_user_by_name(user.name)  # Call the function to fetch user data
    if db_user is None or not bcrypt.checkpw(user.password.encode('utf-8'), db_user['password'].encode('utf-8')):
        raise HTTPException(status_code=400, detail="Invalid username or password")
    
    # Redirect to vaani.html upon successful login
    return RedirectResponse(url="/vaani", status_code=303)

@app.get("/register")
async def register_page(request: Request):
    return templates.TemplateResponse("register.html", {"request": request})  # Serve register.html

@app.post("/register")
async def register_user(
    name: str = Form(...),
    password: str = Form(...),
    profile_pic: UploadFile = File(None)  # Accepting an image file
):
    try:
        hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())

        # Read image data
        profile_pic_data = await profile_pic.read() if profile_pic else None

        # Insert user data into MySQL
        insert_user(name, hashed_password.decode('utf-8'), profile_pic_data)

        # âœ… Return a redirect response to the frontend
        return RedirectResponse(url="/vaani", status_code=303)
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/vaani")
async def vaani_page(request: Request):
    return templates.TemplateResponse("vaani.html", {"request": request})  # Serve vaani.html

# Route to serve favicon
@app.get("/favicon.ico")
async def favicon():
    if os.path.exists("favicon.ico"):
        return FileResponse("favicon.ico")
    else:
        return JSONResponse(content={"message": "Favicon not found"}, status_code=404)

# Optional: API route for handling queries
@app.api_route("/process_query", methods=["POST", "OPTIONS"])
async def process_query_endpoint(request: Request):
    try:
        if request.method == "OPTIONS":
            headers = {
                "Access-Control-Allow-Origin": "*",
                "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
                "Access-Control-Allow-Headers": "Content-Type, Accept",
            }
            return JSONResponse(content={"message": "OPTIONS request received"}, media_type="application/json", headers=headers)
        else:
            user_query = await request.json()
            response = process_query(user_query["query"])
            return {"response": response}
    except Exception as e:
        return {"error": str(e)}

# Database connection configuration
db_config = {
    'user': 'root',          # Ensure this is 'root'
    'password': 'system',    # Ensure this matches the password you set
    'host': 'localhost',
    'database': 'vaani_database'
}

def start_server():
    # Start the server without reload
    uvicorn.run(app, host="0.0.0.0", port=8000)

if __name__ == "__main__":
    # Open the browser to the home page
    webbrowser.open("http://127.0.0.1:8000")
    start_server()  # Start the server

    import datetime
import webbrowser
import pyautogui
import requests
import time


#function for opening apps
def openApp(appName):
    
    pyautogui.press('win')
    pyautogui.typewrite(appName)
    
    pyautogui.press('=')
    pyautogui.press('enter')

    
# Define a function for processing queries
def process_query(user_query):
   
    response = ''
    user_query = user_query.lower()
    if 'hello' in user_query:
        response = 'Hi.  I am Vaani What can i help you with ?'
    #App Launching
    elif 'launch' in user_query:
            appName=  user_query.split('launch')[1]
            openApp(appName) 
            response = (f'Opening {appName}')  
       
    # elif 'what is Vaani' in user_query:
    #     with open("txt\say.txt", 'r') as file:
    #         content = file.read()
    #         response = content

    # elif 'how do you work' in user_query:
    #     with open("txt\work.txt", 'r') as file:
    #         content = file.read()
    #         response = content
    #misc
    elif 'search ' in user_query:
        search_term = user_query.split("for")[-1]
        url = f"https://google.com/search?q={search_term}"
        response = 'Here is what I found for ' + search_term
        webbrowser.get().open(url)    
    elif 'wikipedia for' in user_query:
        response = 'Searching Wikipedia...'
        search_term = user_query.split("for")[-1]
        url = f"https://en.wikipedia.org/wiki/{search_term}"
        response += ' Here is what I found on wikipedia for ' + search_term
        webbrowser.get().open(url)
    elif 'google drive' in user_query:
            webbrowser.open("https://drive.google.com/drive/my-drive")
            response = 'Opening Google Drive'


    elif 'where is' in user_query:
        location = user_query.split("is")[-1]
        location = location.strip()
        response= (f'here is {location} on Google Maps')
        url = f"https://www.google.com/maps/search/{location}"
        webbrowser.open(url)


    elif 'time ' in user_query:
        strTime = datetime.datetime.now().strftime("%H:%M:%S")
        print(f'the time is : {strTime}')
        response = (f'the time is : {strTime}')

    #educational
    elif 'university result' in user_query or 'sgbau' in user_query:
        webbrowser.open("https://sgbau.ucanapply.com/")
        response = 'You can check the results here '
    elif 'github' in user_query:
            webbrowser.open("https://github.com/")
            response = 'Opening Git Hub'
    elif 'linkedin' in user_query:
            webbrowser.open("https://www.linkedin.com/")
            response = 'Opening LinkedIn' 
    elif 'edu plus' in user_query:
        webbrowser.open("https://mauli.edupluscampus.com/")
        response = 'Opening Edu plus Login Page' 
    elif 'stack overflow' in user_query or 'help in programming' in user_query:
        webbrowser.open("https://stackoverflow.com")
        response = 'Opening Stack Overflow'






    #social media
    elif 'youtube' in user_query:
        webbrowser.open("https://youtube.com")
        response = 'Opening YouTube'
    elif 'instagram' in user_query:
        webbrowser.open("https://instagram.com")
        response = 'Opening Instagram' 
    elif 'facebook' in user_query:
        webbrowser.open("https://facebook.com")
        response = 'Opening Facebook'
    elif 'google' in user_query:
            webbrowser.open("https://google.com")
            response = 'Opening google'
    elif 'twitter' in user_query:
        webbrowser.open("https://twitter.com")
        response = 'Opening Twitter'
    elif 'reddit' in user_query:
        webbrowser.open("https://reddit.com")
        response = 'Opening Reddit'
    elif 'pinterest' in user_query:
        webbrowser.open("https://pinterest.com")
        response = 'Opening Pinterest'
    elif 'gmail' in user_query:
        webbrowser.open("https://gmail.com")
        response = 'Opening Gmail'
    elif 'discord' in user_query:
        webbrowser.open("https://discord.com")
        response = 'Opening Discord'
    elif 'netflix' in user_query:
        webbrowser.open("https://netflix.com")
        response = 'Opening Netflix'
    elif 'whatsapp' in user_query:
            webbrowser.open("https://whatsapp.com")
            response = 'Opening WhatsApp'
    elif 'amazon' in user_query:
            webbrowser.open("https://amazon.com")
            response = 'Opening Amazon you can shop online here'

    elif 'online shopping' in user_query or 'shop online' in user_query or 'e-commerce' in user_query:
                url = f"https://google.com/search?q=online shopping"
                response = 'You can shop online from these Websites '
                webbrowser.get().open(url)
    
    elif 'restaurant' in user_query or 'restaurants'in user_query:
                url = f"https://google.com/search?q=restaurants near me "
                response = 'These are some well known places near you'
                webbrowser.get().open(url)
    #if no data to show
    else:
        search_term = user_query
        url = f"https://google.com/search?q={search_term}"
        response = 'Here is what I found for ' + search_term
        webbrowser.get().open(url)

   
        
    return response

    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vaani - AI Voice Assistant</title>
    <link rel="stylesheet" href="static/home.css"> <!-- Link to your CSS file -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/aos/2.3.4/aos.css">
    <link rel="icon" type="image/png" href="static/img/fevi.png"> <!-- Relative path to favicon -->

</head>

<body>
    <!-- Hero Section -->
    <section class="hero">
        <div class="hero-content" data-aos="fade-right">
            <h1>Meet <span class="highlight">Vaani</span>, Your AI Voice Assistant</h1>
            <p>Speak, command, and simplify your tasks with the power of AI.</p>
            <div class="cta-buttons">
                <a href="/register" class="cta-button" data-aos="zoom-in">Get Started</a> <!-- Updated link -->
                <a href="/login" class="cta-button secondary" data-aos="zoom-in">Login</a> <!-- Updated link -->
            </div>
        </div>
        <div class="hero-image" data-aos="fade-left">
            <img src="static/img/logo.png" alt="AI Assistant">
        </div>
    </section>

    <!-- Features Section -->
    <section class="features">
        <h2 data-aos="fade-up">Why Choose Vaani?</h2>
        <div class="feature-container">
            <div class="feature-box" data-aos="fade-right">
                <img src="static/img/voice.png" alt="Voice Control">
                <h3>Voice-Powered Assistance</h3>
                <p>Control your tasks hands-free with intelligent voice commands.</p>
            </div>
            <div class="feature-box" data-aos="fade-up">
                <img src="static/img/smart.png" alt="Smart AI">
                <h3>Smart Learning</h3>
                <p>Vaani adapts to your needs, making interactions smoother over time.</p>
            </div>
            <div class="feature-box" data-aos="fade-left">
                <img src="static/img/info.png" alt="Information Retrieval">
                <h3>Information Retrieval</h3>
                <p>Get quick access to news, weather updates, and general knowledge with ease.</p>
            </div>
        </div>
    </section>

    <section id="benefits">
        <h2>Who Can Benefit from Vaani?</h2>
        <div class="benefits-container" data-aos="fade-up">
            <div class="benefit-box">
                <img src="static/img/student.png" alt="Students">
                <h3>Students</h3>
                <p>Take voice notes, set reminders, and get quick answers to study questions.</p>
            </div>
            <div class="benefit-box">
                <img src="static/img/pro.png" alt="Professionals">
                <h3>Professionals</h3>
                <p>Manage tasks, schedule meetings, and boost productivity hands-free.</p>
            </div>
            <div class="benefit-box">
                <img src="static/img/tech.png" alt="Tech Enthusiasts">
                <h3>Tech Enthusiasts</h3>
                <p>Explore AI-powered voice interaction and automation features.</p>
            </div>
            <div class="benefit-box">
                <img src="static/img/dis.png" alt="Elderly & Differently Abled">
                <h3>Elderly & Differently Abled</h3>
                <p>Make technology more accessible with simple voice commands.</p>
            </div>
        </div>
    </section>

    <!-- Vertical Navigation Bar (Appears After Scrolling) -->
    <nav class="vertical-navbar" data-aos="fade-up">
        <ul class="nav-links">
            <li><a href="/">Home</a></li>
            <li><a href="/services">Services</a></li>
            <li><a href="#" id="contact-link">Contact</a></li>
            <li><a href="https://github.com/Sushil22Mishra/Vaani_A_Personalized_AI_Assistant/blob/main/README.md" target="_blank">About</a></li>
            <footer>
                <p>&copy; 2025 Vaani . All rights reserved.</p>
            </footer>
        </ul>
    </nav>
    
       <!-- Contact Modal -->
    <div id="contact-modal" class="modal">
        <div class="modal-content">
            <span class="close-btn">&times;</span>
            <h2>Contact Me</h2>
            
            <!-- Icons for GitHub & LinkedIn -->
            <div class="contact-icons">
                <a href="https://github.com/Sushil22Mishra" target="_blank">
                    <img src="static/img/github.png" alt="GitHub">
                </a>
                <a href="https://www.linkedin.com/in/sushil-mishra-a4183b272" target="_blank">
                    <img src="static/img/linkedin.png" alt="LinkedIn">
                </a>
            </div>
    
            <!-- Email Link -->
            <p>
                <a href="sushil22mishra@gmail.com" class="email-link">
                    sushil22mishra@gmail.com
                </a>
            </p>
        </div>
    </div>
    
        </div>
    
    
        <script src="static/home.js"></script> <!-- Link to your JavaScript file -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/aos/2.3.4/aos.js"></script>
        <script>
            AOS.init();
        </script>
     
    </body>
    </html>

    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Vaani</title>
    <link rel="stylesheet" href="static/styles.css"> <!-- Relative path to CSS -->
    <link rel="icon" type="image/png" href="static/img/fevi.png"> <!-- Relative path to favicon -->
</head>
<body>
    <!-- Logo outside the container, wrapped in a link -->
    <a href="/"> <!-- Link to home page -->
        <img src="static/img/logo.png" alt="Logo" id="logo"> <!-- Relative path to logo -->
    </a>

    <div class="container">
        <h2>Welcome to Vaani</h2>

        <div id="profile-pic-container">
            <img id="profile-pic" class="profile-pic" src="/static/img/user.png" alt="User Profile">
            <p id="username">LogIn</p>
        </div>
        

        <form id="login-form">
            <input type="text" id="username-input" placeholder="Username" required>
            <input type="password" id="password" placeholder="Password" required>
            <button type="submit">Login</button>
        </form>
        <p>Don't have an account? <a href="/register">Register here</a></p> <!-- Updated link -->
    </div>

    <script>
        const profilePic = document.getElementById('profile-pic');
        const profileInput = document.getElementById('profile-input');
        const defaultName = 'User   ';

        profilePic.textContent = defaultName.charAt(0).toUpperCase();

        profilePic.addEventListener('click', () => {
            profileInput.click();
        });

        profileInput.addEventListener('change', (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    profilePic.style.backgroundImage = `url(${e.target.result})`;
                    profilePic.textContent = '';
                    profilePic.style.backgroundSize = 'cover';
                    profilePic.style.backgroundPosition = 'center';
                };
                reader.readAsDataURL(file);
            }
        });

        const loginForm = document.getElementById('login-form');
        loginForm.addEventListener('submit', (event) => {
            event.preventDefault();

            const username = document.getElementById('username-input').value;
            const password = document.getElementById('password').value;

            // Send login request
            fetch('http://localhost:8000/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ name: username, password: password })
            })
            .then(response => {
                if (response.redirected) {
                    // If the response is a redirect, navigate to the new URL
                    window.location.href = response.url; // Redirect to vaani page
                } else {
                    return response.json();
                }
            })
            .then(data => {
                if (data && data.detail) {
                    console.error('Login failed: ' + data.detail); // Log the error
                }
            })
            .catch(error => {
                console.error('Error:', error);
                console.error('An error occurred, please try again.'); // Log the error
            });
        });
    </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Services</title>
    <link rel="stylesheet" href="static/home.css"> <!-- Correct relative path to CSS -->
    <link rel="icon" type="image/png" href="static/img/fevi.png"> <!-- Correct relative path to favicon -->
</head>
<body>
    <header>
        <h1>Our Services</h1>
    </header>

    <section id="personalized-user-experiences">
        <h2>Personalized User Experiences</h2>
        <p>Our voice assistant learns your preferences over time, providing tailored recommendations and responses based on your individual habits and past interactions. Enjoy a more engaging and customized experience every time you interact.</p>
        <ul>
            <li>Adapts to your voice and speech patterns</li>
            <li>Remembers your favorite commands</li>
            <li>Offers personalized suggestions based on usage</li>
        </ul>
    </section>

    <section id="task-management-features">
        <h2>Task Management Features</h2>
        <p>Stay organized and efficient with our task management capabilities. Set reminders, manage to-do lists, and schedule appointments effortlessly, ensuring you never miss an important task.</p>
        <ul>
            <li>Set reminders for important events</li>
            <li>Create and manage to-do lists</li>
            <li>Schedule appointments with ease</li>
        </ul>
    </section>

    <section id="media-control">
        <h2>Media Control</h2>
        <p>Control your music, podcasts, and other media with ease. Our voice assistant allows for hands-free entertainment, enabling seamless playback and a more enjoyable listening experience.</p>
        <ul>
            <li>Play, pause, and skip tracks with voice commands</li>
            <li>Control volume and playback settings</li>
            <li>Access your favorite playlists and stations</li>
        </ul>
    </section>

    <section id="information-retrieval">
        <h2>Information Retrieval</h2>
        <p>Quickly access information and answers to your questions. Our assistant provides real-time updates and insights, making it easier to stay informed.</p>
        <ul>
            <li>Get answers to general knowledge questions</li>
            <li>Receive weather updates and forecasts</li>
            <li>Stay informed with news briefings</li>
        </ul>
    </section>

    <section id="integration-with-third-party-services">
        <h2>Integration with Third-Party Services</h2>
        <p>Seamlessly connect with various apps and services, enhancing your experience and allowing for a more integrated approach to managing your tasks and entertainment.</p>
        <ul>
            <li>Connect with smart home devices</li>
            <li>Integrate with calendar and email services</li>
            <li>Access third-party apps for enhanced functionality</li>
        </ul>
    </section>

    <section id="future-enhancements">
        <h2>Future Enhancements</h2>
        <p>We are continuously working on new features and improvements to enhance your experience. Stay tuned for updates that will make our voice assistant even more powerful and user-friendly.</p>
        <ul>
            <li>New language support</li>
            <li>Enhanced voice recognition capabilities</li>
            <li>Additional integrations with popular services</li>
        </ul>
    </section>

    <footer>
        <p>&copy; 2025 Vaani Services. All rights reserved.</p>
    </footer>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Register - Vaani</title>
    <link rel="stylesheet" href="static/styles.css"> <!-- Relative path to CSS -->
    <link rel="icon" type="image/png" href="static/img/fevi.png"> <!-- Relative path to favicon -->
</head>
<body>
    <!-- Logo outside the container, wrapped in a link -->
    <a href="/"> <!-- Link to home page -->
        <img src="static/img/logo.png" alt="Logo" id="logo"> <!-- Relative path to logo -->
    </a>

    <div class="container">
        <h2>Create New User</h2>
        <form id="register-form" action="/register" method="post" enctype="multipart/form-data">
            <!-- Name field -->
            <input type="text" name="name" id="new-name" placeholder="Full Name" required>

            <!-- Password field -->
            <input type="password" name="password" id="new-password" placeholder="Password" required>

            <!-- Confirm Password field -->
            <input type="password" id="confirm-password" placeholder="Confirm Password" required>

            <!-- Profile picture field -->
            <div id="profile-pic-container">
            <img id="profile-pic" class="profile-pic" src="/static/img/add_user.png" alt="User Profile">
            </div>


            <!-- Submit button -->
            <button type="submit">Register</button>
        </form>
        <p>Already have an account? <a href="/login">Login here</a></p>
    </div>
    <script src="static/register.js"></script> <!-- Relative path to JavaScript -->
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vaani - Your Personal Voice Assistant</title>
    <link rel="stylesheet" href="static/s2.css"> <!-- Relative path to CSS -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">
    <link rel="icon" type="image/png" href="static/img/fevi.png"> <!-- Relative path to favicon -->
</head>
<body class="light-mode">
    <div class="container">
        <header>
            <h1></h1>
            <button id="theme-toggle" aria-label="Toggle dark mode">
                <img src="static/img/dark.png" alt="Dark mode" width="40" height="40"> <!-- Relative path to dark mode image -->
            </button>
        </header>

        <div id="wave">
            <img src="static/img/logo.png" alt="Logo" id="logo"> <!-- Relative path to logo -->
        </div>

        <button id="start-btn" aria-label="Start listening">Start Listening</button>

        <div id="chat-box" class="chat-box" role="log">
            <!-- Messages will be appended here -->
        </div>

        <div id="output" aria-live="polite">Your voice will appear here...</div>

        <div id="response"></div> <!-- Add this div element -->

        <!-- Help Section -->
    </div>
    <script src="static/vaani.js"></script> <!-- Relative path to JavaScript -->
    
</body>
</html>

/* General Styling */
body {
    font-family: 'Roboto Condensed', sans-serif;
    margin: 0;
    display: flex;
    flex-direction: column; /* Stack children vertically */
    justify-content: center; /* Center content vertically */
    align-items: center; /* Center content horizontally */
    transition: background-color 0.5s ease, color 0.5s ease;
    background: linear-gradient(135deg, #003d42 0%, #00302f 100%);
    color: #2a2a2a;
}

/* Hero Section */
.hero {
    display: flex;
    flex-direction: row; /* Side-by-side layout */
    justify-content: center;
    align-items: center;
    min-height: 100vh; /* Full-screen height */
    width: 100vw; /* Full width */
    padding: 0 10%;
    background: linear-gradient(135deg, #002427, #006e6c);
    color: white;
    text-align: left;
    box-sizing: border-box;
}

.hero-content {
    max-width: 50%;
}

.hero h1 {
    font-size: 3.5rem;
    color: #c0ffff;
    text-shadow: 0px 5px 20px rgba(3, 242, 255, 0.5);
    margin: 0;
}

.hero .highlight {
    color: #2fd7d2;
}

.hero p {
    font-size: 1.2rem;
    opacity: 0.9;
    color: #e0ffff;
    max-width: 600px;
    margin-top: 15px;
}

.cta-buttons {
    margin-top: 20px;
}

.cta-button {
    display: inline-block;
    padding: 12px 24px;
    background-color: #00595f;
    color: white;
    border-radius: 8px;
    text-decoration: none;
    font-weight: bold;
    margin-right: 10px;
    transition: 0.3s ease-in-out;
}

.cta-button:hover {
    background-color: #2fd7d2;
    box-shadow: 0 5px 15px rgba(3, 242, 255, 0.4);
}

.cta-button.secondary {
    background: transparent;
    border: 2px solid #2fd7d2;
    color: #2fd7d2;
}

.cta-button.secondary:hover {
    background: #2fd7d2;
    color: #0f172a;
}

/* Hero Image */
.hero-image img {
    width: 300px;
    animation: glow 2s infinite alternate;
}

@keyframes glow {
    from { filter: drop-shadow(0 0 10px #2fd7d2); }
    to { filter: drop-shadow(0 0 20px #5fe7e5); }
}

/* Features Section */
.features {
    text-align: center;
    padding: 80px 10%;
    background: linear-gradient(135deg, #001f23, #004e50);
    color: white;
}

.features h2 {
    font-size: 2.5rem;
    margin-bottom: 40px;
    color: #72fffd;
    text-shadow: 0px 4px 10px rgba(3, 242, 255, 0.5);
}

.feature-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 30px;
}

.feature-box {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    padding: 30px;
    border-radius: 15px;
    text-align: center;
    flex: 1;
    transition: transform 0.3s ease;
}

.feature-box:hover {
    transform: translateY(-5px);
}

.feature-box img {
    width: 80px;
    margin-bottom: 15px;
}

.feature-box h3 {
    font-size: 1.5rem;
    color: #2fd7d2;
}

.feature-box p {
    font-size: 1rem;
    color: #e0ffff;
}

/* Responsive */
@media (max-width: 768px) {
    .feature-container {
        flex-direction: column;
    }
}


/* Benefits Section Styling */
/* Benefits Section Styling (Updated to Match Features Section) */
#benefits {
    text-align: center;
    padding: 80px 10%;
    background: linear-gradient(135deg, #001f23, #004e50);
    color: white;
}

#benefits h2 {
    font-size: 2.5rem;
    margin-bottom: 40px;
    color: #72fffd;
    text-shadow: 0px 4px 10px rgba(3, 242, 255, 0.5);
}

/* Benefits Grid */
.benefits-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 30px;
    flex-wrap: wrap;
}

/* Benefit Box Styling */
.benefit-box {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    padding: 30px;
    border-radius: 15px;
    text-align: center;
    flex: 1;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    min-width: 250px;
}

/* Hover Effect */
.benefit-box:hover {
    transform: translateY(-5px);
    box-shadow: 0 12px 24px rgba(0, 255, 255, 0.3);
}

/* Icons */
.benefit-box img {
    width: 80px;
    margin-bottom: 15px;
}

/* Benefit Titles */
.benefit-box h3 {
    font-size: 1.5rem;
    color: #2fd7d2;
}

/* Benefit Descriptions */
.benefit-box p {
    font-size: 1rem;
    color: #e0ffff;
}

/* Responsive Design */
@media (max-width: 768px) {
    .benefits-container {
        flex-direction: column;
    }
}





/* Vertical Navigation Bar (Appears Below Hero Section) */
.vertical-navbar {
    width: 100%;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(15px);
    padding: 40px 0;
    text-align: center;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
}

.nav-links {
    list-style: none;
    display: flex;
    flex-direction: column; /* Vertical layout */
    align-items: center;
}

.nav-links li {
    margin: 15px 0; /* Spacing between items */
}

.nav-links a {
    text-decoration: none;
    color: #ecf0f1;
    font-size: 1.5rem;
    font-weight: bold;
    transition: color 0.3s ease;
    padding: 10px;
}

.nav-links a:hover {
    color: #72fffd;
}

/* Responsive Design */
@media (max-width: 768px) {
    .hero {
        flex-direction: column;
        text-align: center;
        padding: 20px;
    }

    .hero-content {
        max-width: 80%;
    }

    .hero h1 {
        font-size: 2.5rem;
    }

    .hero p {
        font-size: 1rem;
    }

    .hero-image img {
        width: 200px;
        margin-top: 20px;
    }
}
/* Modal Background */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(5px);
    justify-content: center;
    align-items: center;
}

/* Modal Content */
/* Modal Background */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(5px);
    justify-content: center;
    align-items: center;
}

/* Modal Content */
.modal-content {
    background: #003d42;
    padding: 20px;
    border-radius: 10px;
    width: 400px;
    text-align: center;
    color: white;
    box-shadow: 0 4px 15px rgba(0, 255, 255, 0.3);
    position: relative;
}

/* Close Button */
.close-btn {
    position: absolute;
    top: 10px;
    right: 15px;
    font-size: 24px;
    cursor: pointer;
}

/* Contact Icons */
.contact-icons {
    display: flex;
    justify-content: center;
    gap: 20px;
    margin: 20px 0;
}

.contact-icons a {
    text-decoration: none;
}

.contact-icons img {
    width: 50px;
    transition: transform 0.3s ease;
}

.contact-icons img:hover {
    transform: scale(1.1);
}

/* Email Link */
.email-link {
    color: #2fd7d2;
    font-size: 1.2rem;
    text-decoration: none;
    font-weight: bold;
}

.email-link:hover {
    text-decoration: underline;
}
document.addEventListener("DOMContentLoaded", function () {
    const contactLink = document.getElementById("contact-link");
    const modal = document.getElementById("contact-modal");
    const closeModal = document.querySelector(".close-btn");

    // Open Modal on Click
    contactLink.addEventListener("click", function (event) {
        event.preventDefault(); // Prevent default link behavior
        modal.style.display = "flex";
    });

    // Close Modal on Clicking Close Button
    closeModal.addEventListener("click", function () {
        modal.style.display = "none";
    });

    // Close Modal on Clicking Outside of Modal Content
    window.addEventListener("click", function (event) {
        if (event.target === modal) {
            modal.style.display = "none";
        }
    });
});

document.getElementById('login-form').addEventListener('submit', function(event) {
    event.preventDefault(); // Prevent form submission

    const username = document.getElementById('username-input').value;
    const password = document.getElementById('password').value;

    // Add fade-out class to the body before sending the request
    document.body.classList.add('fade-out');

    // Send login request
    fetch('http://localhost:8000/login', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ name: username, password: password })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Wait for the fade-out animation to complete before redirecting
            setTimeout(function() {
                window.location.href = 'vaani.html'; // Redirect to vaani page
            }, 1000); // Optional: Adjust the delay if needed
        } else {
            // If login fails, remove the fade-out class and show error
            document.body.classList.remove('fade-out');
            alert('Login failed: ' + data.message); // Keep this alert for login failure
        }
    })
    .catch(error => {
        // Handle error
        console.error('Error:', error);
        document.body.classList.remove('fade-out'); // Ensure the fade-out is removed in case of error
        alert('An error occurred, please try again.'); // Keep this alert for errors
    });
});
document.getElementById('register-form').addEventListener('submit', async function (event) { 
    event.preventDefault(); // Prevent default form submission

    const name = document.getElementById('new-name').value;
    const password = document.getElementById('new-password').value;
    const confirmPassword = document.getElementById('confirm-password').value;
    const profilePicInput = document.getElementById('profile-input');
    
    // Validation checks
    if (!name || !password || !confirmPassword) {
        console.error('All fields are required!');
        return;
    }

    if (password !== confirmPassword) {
        console.error('Passwords do not match');
        return;
    }

    // Get profile picture file (if selected)
    const profilePicFile = profilePicInput.files[0] || null; 

    // Send form data to the server
    await sendRegisterData(name, password, profilePicFile);
});

// Function to send data to FastAPI
async function sendRegisterData(name, password, profilePic) {
    const formData = new FormData();
    formData.append("name", name);
    formData.append("password", password);
    if (profilePic) {
        formData.append("profile_pic", profilePic);
    }

    try {
        const response = await fetch("http://localhost:8000/register", {
            method: "POST",
            body: formData,
            redirect: "follow", // Ensures fetch follows redirects
        });

        if (response.redirected) {
            window.location.href = response.url; // Redirect manually
        } else {
            const result = await response.json();
            alert(result.detail || "An error occurred during registration.");
        }
    } catch (error) {
        console.error("Error:", error);
        alert("An error occurred while registering.");
    }
}



// Handle profile picture selection and preview
const profilePic = document.getElementById('profile-pic');
const profileInput = document.getElementById('profile-input');

profilePic.addEventListener('click', function() {
    profileInput.click(); // Open file selection on profile picture click
});

profileInput.addEventListener('change', function(event) {
    const file = event.target.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            profilePic.style.backgroundImage = `url(${e.target.result})`;
            profilePic.textContent = ''; // Remove "+" symbol
            profilePic.style.backgroundSize = 'cover';
            profilePic.style.backgroundPosition = 'center';
        };
        reader.readAsDataURL(file);
    }
});
/* General Styling */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
body {
    font-family: 'Roboto Condensed';

    margin: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    transition: background-color 0.5s ease, color 0.5s ease;
    background: linear-gradient(135deg, #174D51 0%, #5fe7e5 100%);
    color: #2a2a2a;
}
/* Logo Styling */
/* Position the logo to the left side */
#logo {
    position: absolute;
    top: 20px; /* Adjust the top position */
    left: 20px; /* Adjust the left position */
    width: 100px; /* Adjust the size */
    height: auto;
}

/* Profile Picture Styling */
/* Profile Picture Styling */
.profile-pic {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background-color: #33555d;
    color: white;
    font-size: 2.5em;
    display: flex;
    justify-content: center;
    align-items: center;
    margin: 20px auto;
    overflow: hidden;
    cursor: pointer;
    transition: transform 0.3s ease, box-shadow 0.3s ease, border 0.3s ease;
    border: 4px solid #00595f; /* Add a white border */
}
/* Fade-in animation */
@keyframes neonFadeIn {
    from {
        opacity: 0;
        transform: scale(0.95);
        filter: blur(2px);
    }
    to {
        opacity: 1;
        transform: scale(1);
        filter: blur(0);
    }
}

.container {
    animation: neonFadeIn 0.5s ease-out;
    background: linear-gradient(135deg, rgba(255, 0, 255, 0.4), rgba(0, 255, 255, 0.4));
    box-shadow: 0 0 10px rgba(255, 0, 255, 0.5), 0 0 20px rgba(0, 255, 255, 0.5);
}
.profile-pic:hover {
    transform: scale(1.05);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    border-color: #5fe7e5; /* Change border color on hover */
}



input[type="file"] {
    display: none;
}

/* Container Styling */
.container {
    text-align: center;
    background: rgba(255, 255, 255, 0.1);
    padding: 40px;
    border-radius: 25px;
    backdrop-filter: blur(15px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    max-width: 450px;
    width: 100%;
    margin: 20px;
    transition: transform 0.3s ease, opacity 0.3s ease;
}

.container:hover {
    transform: translateY(-10px);
}

/* Welcome Text Styling */
h2 {
    margin-bottom: 10px;
    font-size: 1.6em;
    font-weight: 400;
    color: #f2f2f2;
    text-transform: capitalize;
    font-family: 'Roboto';
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
    opacity: 0.85;
    letter-spacing: 0.5px;
}
#logo {
    transition: filter 0.3s ease-in-out, transform 0.2s ease-in-out, box-shadow 0.3s ease-in-out;
}

#logo:hover {
    filter: drop-shadow(0 0 10px cyan) drop-shadow(0 0 20px rgba(3, 242, 255, 0.879));
    transform: scale(1.05);
}



/* Subtitle Styling */
p {
    font-size: 1.1em;
    font-weight: 300;
    color: #ccc;
    letter-spacing: 0.5px;
    margin-top: 15px;
    font-family: 'Roboto', sans-serif;
}

/* Form Styling */
form {
    display: flex;
    flex-direction: column;
    gap: 15px;
    margin-top: 20px;
}

/* Input Fields Styling */
input[type="text"],
input[type="password"] {
    padding: 15px;
    border: none;
    border-radius: 10px;
    font-size: 1.1em;
    background: rgba(255, 255, 255, 0.2);
    color: #333;
    transition: background 0.3s ease, transform 0.3s ease, box-shadow 0.3s ease;
    box-sizing: border-box;
}

input[type="text"]:focus,
input[type="password"]:focus {
    background: rgba(255, 255, 255, 0.734);
    transform: scale(1.05);
    outline: none;
    color: #333;
    box-shadow: 0 0 10px rgba(92, 141, 153, 0.6);
}

/* Button Styling */
button {
    padding: 12px;
    background-color: #00595f;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1.2em;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.3s ease, box-shadow 0.3s ease;
}

button:hover {
    background-color: #72fffd;
    -webkit-text-fill-color: #174D51;
    transform: translateY(-3px);
    box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
}

button:active {
    transform: translateY(1px);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
}

/* Link Styling */
a {
    text-decoration: none;
    color: #128684;
    font-weight: 500;
    transition: color 0.3s ease;
}

a:hover {
    color: #0f6e5d;
}

/* Responsive Design */
@media (max-width: 600px) {
    .container {
        padding: 30px;
        margin: 15px;
    }

    h2 {
        font-size: 1.5em;
    }

    #username {
        font-size: 1.5em;
    }

    p {
        font-size: 1em;
    }

    input[type="text"],
    input[type="password"],
    button {
        font-size: 1em;
    }

    .profile-pic {
        width: 80px;
        height: 80px;
        font-size: 2em;
    }
}


// Check for SpeechRecognition support in the browser
window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
const recognition = new SpeechRecognition();
recognition.interimResults = false;
recognition.lang = 'en-US'; // Language preference

// DOM elements
const transcriptOutput = document.getElementById('output');
const startBtn = document.getElementById('start-btn');
const wave = document.getElementById('wave');
const chatBox = document.getElementById('chat-box');
const responseDiv = document.getElementById('response'); // Define the response div

// Text-to-Speech variables
let voices = [];
const synth = window.speechSynthesis;

// Fetch available voices
function loadVoices() {
    voices = synth.getVoices();
    // Check if voices are available immediately or wait for the 'voiceschanged' event
    if (voices.length) {
        selectVoice(); // Call the function to set the preferred voice
    }
}

// Set the desired voice
function selectVoice() {
    // You can change the voice name below to match your desired voice
    const preferredVoiceName = "Google US English"; // Change to desired voice name
    const preferredVoice = voices.find(voice => voice.name === preferredVoiceName);
    
    if (preferredVoice) {
        // Store the preferred voice globally for later use
        window.preferredVoice = preferredVoice;
    } else {
        console.warn("Preferred voice not found, defaulting to the first available voice.");
        window.preferredVoice = voices[0]; // Fallback to the first available voice
    }
}

const chatMessages = document.createElement('div');
chatMessages.classList.add('chat-messages');
chatBox.appendChild(chatMessages);

// Function to add message to chat box
function addMessageToChatBox(message, sender) {
    const messageDiv = document.createElement('div');
    messageDiv.classList.add('chat-message');

    if (sender === 'user') {
        messageDiv.classList.add('user-message');
    } else {
        messageDiv.classList.add('assistant-message');
    }
    // Set the message content
    const messageText = document.createElement('p');
    messageText.textContent = message;
    messageDiv.appendChild(messageText);

    // Append the message to the chat box
    chatMessages.appendChild(messageDiv);

    // Scroll to the bottom of the chat box
    chatBox.scrollTop = chatBox.scrollHeight;
}

// Add initial message to chat box

// When user clicks start
startBtn.addEventListener('click', () => {
    transcriptOutput.textContent = "â€¢ Listening...";
    recognition.start();
    wave.style.animationPlayState = 'running'; // Start the pulse animation
    startBtn.disabled = true; // Disable button while listening
});

// When speech is detected
recognition.addEventListener('result', (e) => {
    const transcript = e.results[0][0].transcript;
    addMessageToChatBox(transcript, 'user');
    handleResponse(transcript);
});

// When recognition ends
recognition.addEventListener('end', () => {
    wave.style.animationPlayState = 'paused'; // Stop the pulse animation
    startBtn.disabled = false; // Re-enable the button
});

// Command handling logic
function handleResponse(transcript) {
    try {
        // Check for dark mode commands
        if (transcript.includes('dark mode')) {
            document.body.classList.add('dark-mode');
            document.body.classList.remove('light-mode');
            addMessageToChatBox("Switched to dark mode.", 'assistant');
            speakResponse("Switched to dark mode.");
            return; // Exit the function after handling the command
        } else if (transcript.includes('light mode')) {
            document.body.classList.add('light-mode');
            document.body.classList.remove('dark-mode');
            addMessageToChatBox("Switched to light mode.", 'assistant');
            speakResponse("Switched to light mode.");
            return; // Exit the function after handling the command
        }

        // Send request to FastAPI backend
        fetch('http://localhost:8000/process_query', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ query: transcript })
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.error('Error:', data.error);
                addMessageToChatBox(data.error, 'assistant');
            } else {
                const responseText = data.response; // Define responseText variable
                responseDiv.innerHTML = responseText; // Update the response div
                addMessageToChatBox (responseText, 'assistant');
                speakResponse(responseText);
            }
        })
        .catch(error => console.error('Error:', error));
    } catch (error) {
        console.error('Error handling response:', error);
    }
}

// Text-to-Speech function
function speakResponse(text) {
    if (!text) {
        console.error("No text to speak");
        return;
    }

    try {
        const utterance = new SpeechSynthesisUtterance(text);

        if (!window.preferredVoice && !voices.length) {
            console.error("No voices available");
            return;
        }

        utterance.voice = window.preferredVoice || voices[1]; // Use the preferred voice or fallback
        utterance.pitch = 1.2; // Slightly higher pitch for a more natural female tone
        utterance.rate = 0.9; // Normal speed
        utterance.volume = 1; // Maximum volume

        utterance.onstart = function(event) {
            console.log("Speech started");
        };

        utterance.onend = function(event) {
            console.log("Speech ended");
        };

        utterance.onerror = function(event) {
            console.error("Speech error", event);
        };

        console.log("Speaking response:");
        console.log(text);
        console.log(utterance);
        console.log(window.speechSynthesis.pending);
        console.log(window.speechSynthesis.speaking);
        console.log(window.speechSynthesis.paused);

        // Add a 1-second delay before speaking the text
        setTimeout(() => {
            window.speechSynthesis.speak(utterance);
        }, 1000);
    } catch (error) {
        console.error("Error speaking response:", error);
    }
}

// Function to greet the user according to the time
function greetUser () {
    const currentTime = new Date().getHours();
    let greeting = '';

    if (currentTime < 12) {
        greeting = 'Good morning!';
    } else if (currentTime < 18) {
        greeting = 'Good afternoon!';
    } else {
        greeting = 'Good evening!';
    }

    addMessageToChatBox(greeting, 'assistant');
    speakResponse(greeting);
}

greetUser ();

// Load voices when the page is ready
window.addEventListener('load', () => {
    loadVoices();
    // Listen for voices changed event
    speechSynthesis.onvoiceschanged = loadVoices;
    document.getElementById('theme-toggle').addEventListener('click', function() {
        document.body.classList.toggle('dark-mode');
        // Add theme toggle functionality here
    });
});

/* General Styling */
body {
    font-family: 'Poppins', sans-serif;
    margin: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 120vh;
    
    transition: background-color 0.5s ease, color 0.5s ease;
}
html {
    scroll-behavior: smooth;
}


/* Fade-in animation */
@keyframes neonFadeIn {
    from {
        opacity: 0;
        transform: scale(0.95);
        filter: blur(2px);
    }
    to {
        opacity: 1;
        transform: scale(1);
        filter: blur(0);
    }
}

.container {
    animation: neonFadeIn 1s ease-out;
    background: linear-gradient(135deg, rgba(255, 0, 255, 0.4), rgba(0, 255, 255, 0.4));
    box-shadow: 0 0 10px rgba(255, 0, 255, 0.5), 0 0 20px rgba(0, 255, 255, 0.5);
}



/* Light Mode */
body.light-mode {
    background: linear-gradient(135deg, #174D51 0%, #5fe7e5 100%);
    color: #fff;
}

/* Dark Mode */
body.dark-mode {
    background: linear-gradient(135deg, #0f0f0f 0%, #404040 100%);
    color: #f0f0f0;
}

.container {
    text-align: center;
    background: rgba(255, 255, 255, 0.1);
    padding: 40px;
    border-radius: 15px;
    backdrop-filter: blur(10px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
    max-width: 700px;
    width: 100%;
    margin: 20px;
}



#theme-toggle {
    padding: 10px 20px;
    border: none;
    border-radius: 30px;
    background-color: #6dedeb;
    color: #174D51;
    font-weight: bold;
    cursor: pointer;
    position: absolute;
    top: 20px;
    right: 20px;
    z-index: 1;
    transition: background-color 0.3s ease;



}

#theme-toggle:hover {
    background-color: #265d61;
}

body.dark-mode #theme-toggle {
    background-color: #464646;
    
    
    color: #f0f0f0;
  
}
body.dark-mode .chat-box{
    
    background-color: #a5a5a521;
    -webkit-text-fill-color: #000000;
}
#wave {
    width: 120px;
    height: 120px;
    background-color: rgba(255, 255, 255, 0.2);
    border-radius: 50%;
    margin: 0 auto 30px;
    position: relative;
}

#logo {
    width: 80px;
    height: auto;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

#wave::before, #wave::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.15);
    animation: pulse 2s infinite;
}

#wave::after {
    animation-delay: 0.5s;
}

@keyframes pulse {
    0% {
        transform: scale(1);
        opacity: 1;
    }
    100% {
        transform: scale(1.5);
        opacity: 0;
    }
}

#output {
    margin-top: 20px;
    font-size: 1.4em;
    min-height: 40px;
}

#response {
    margin-top: 20px;
    font-size: 1.4em;
    min-height: 40px;
}

#help-section {
    margin-top: 20px;
}

#help-section ul li {
    font-size: 1.1em;
}

/* Button Styling */
button {
    padding: 15px 30px;
    background-color: #00595f;
    color: white;
    border: none;
    border-radius: 25px;
    font-size: 1em;
    cursor: pointer;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    transition: all 0.3s ease;
}

button:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
    background-color: #72fffd;
    -webkit-text-fill-color: #174D51;
}

button:disabled {
    background-color: #bbb;
}

/* Chat Box Styles */
.chat-box {
    
    border-radius: 8px;
    padding: 10px;
    max-width: 650px;
    max-height: 60vh;
    height: 350px;
    overflow-y: auto;
    background-color: #4ec3bf;
    margin: 20px;
    width: 100%;
    box-sizing: border-box;
    overflow-y: auto;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
  }





  .chat-message {
    
    margin-bottom: 20px;
    padding: 10px;
    border-radius: 20px;
    background-color: #ffffff;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out;
    word-wrap: break-word;
    width: 95%;
    align-content: flex-end;

  }
  




.chat-message:hover {
    transform: scale(1.1);
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
}

.chat-message.user-message:hover {
    transform: scale(1.05);
    
}

.chat-message.assistant-message:hover {
    transform: scale(1.05);
    
}



  .chat-message.user-message {
    background-color: #7cfdf9fe;
    text-align: right;
    border-bottom-right-radius: 0;
    -webkit-text-fill-color: #000000;
    align-content: end;
  }
  .assistant-icon {
    width: 30px;
    height: 30px;
    margin-right: 10px;
    vertical-align: top;
    
  }
  
  .chat-message.assistant-message {
    background-color: #4fa09efe;
    text-align: left;
    padding: 12px 15px;
    border-bottom-left-radius: 0;
    -webkit-text-fill-color: #000000;
    align-self: flex-start;
  }

  
  .dark-mode .chat-message.user-message {
    

    background-color: #626262;
    -webkit-text-fill-color: #ffffff;
    color: #fff;
  }
  
  
  .dark-mode .chat-message.assistant-message {
    background-color: #232323;
    -webkit-text-fill-color: #ffffff;
    color: #fff;
  }
  
  .chat-message p {
    margin: 0;
  }

import mysql.connector

def get_db_connection():
    return mysql.connector.connect(
        host="localhost",
        user="root",          # Ensure this is 'root'
        password="system",    # Ensure this matches the password you set
        database="vaani_database",
        auth_plugin='mysql_native_password'  # Specify the authentication plugin
    )

def insert_user(name, password, profile_pic):
    connection = get_db_connection()
    cursor = connection.cursor()
    try:
        cursor.execute(
            "INSERT INTO users (name, password, profile_pic) VALUES (%s, %s, %s)",
            (name, password, profile_pic)
        )
        connection.commit()
    except Exception as e:
        raise e
    finally:
        cursor.close()
        connection.close()

def get_user_by_name(name):
    connection = get_db_connection()
    cursor = connection.cursor(dictionary=True)  # Use dictionary cursor for easier access
    try:
        cursor.execute("SELECT * FROM users WHERE name = %s", (name,))
        user = cursor.fetchone()  # Fetch a single user record
        return user  # Return the user record as a dictionary
    except Exception as e:
        raise e
    finally:
        cursor.close()
        connection.close()
        from setuptools import find_packages, setup
from typing import List

HYPEN_E_DOT= '-e .'
def get_requirements(file_path:str)->List[str]:
    """This function returns a list of requirements from a file."""

    requirements=[]
    with open('requirements.txt') as file_obj:
        requirements= file_obj.readlines()
        requirements= [req.replace("\n", "") for req in requirements ]

        if HYPEN_E_DOT in requirements:
            requirements.remove(HYPEN_E_DOT)
    
    return requirements


setup(
    name='vaani',
    version='0.0.1',
    author_name= 'Sushil Mishra',
    author_email= 'sushil22mishra@gmail.com',
    packages= find_packages(),
    install_requires= get_requirements('requirements.txt')
)
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# PyPI configuration file
.pypirc


// Check for SpeechRecognition support in the browser
window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
const recognition = new SpeechRecognition();
recognition.interimResults = false;
recognition.lang = 'en-US'; // Language preference

// DOM elements
const transcriptOutput = document.getElementById('output');
const startBtn = document.getElementById('start-btn');
const wave = document.getElementById('wave');
const chatBox = document.getElementById('chat-box');
const responseDiv = document.getElementById('response'); // Define the response div

// Text-to-Speech variables
let voices = [];
const synth = window.speechSynthesis;

// Fetch available voices
function loadVoices() {
    voices = synth.getVoices();
    // Check if voices are available immediately or wait for the 'voiceschanged' event
    if (voices.length) {
        selectVoice(); // Call the function to set the preferred voice
    }
}

// Set the desired voice
function selectVoice() {
    // You can change the voice name below to match your desired voice
    const preferredVoiceName = "Google US English"; // Change to desired voice name
    const preferredVoice = voices.find(voice => voice.name === preferredVoiceName);
    
    if (preferredVoice) {
        // Store the preferred voice globally for later use
        window.preferredVoice = preferredVoice;
    } else {
        console.warn("Preferred voice not found, defaulting to the first available voice.");
        window.preferredVoice = voices[0]; // Fallback to the first available voice
    }
}

const chatMessages = document.createElement('div');
chatMessages.classList.add('chat-messages');
chatBox.appendChild(chatMessages);

// Function to add message to chat box
function addMessageToChatBox(message, sender) {
    const messageDiv = document.createElement('div');
    messageDiv.classList.add('chat-message');

    if (sender === 'user') {
        messageDiv.classList.add('user-message');
    } else {
        messageDiv.classList.add('assistant-message');
    }
    // Set the message content
    const messageText = document.createElement('p');
    messageText.textContent = message;
    messageDiv.appendChild(messageText);

    // Append the message to the chat box
    chatMessages.appendChild(messageDiv);

    // Scroll to the bottom of the chat box
    chatBox.scrollTop = chatBox.scrollHeight;
}

// Add initial message to chat box

// When user clicks start
startBtn.addEventListener('click', () => {
    transcriptOutput.textContent = "â€¢ Listening...";
    recognition.start();
    wave.style.animationPlayState = 'running'; // Start the pulse animation
    startBtn.disabled = true; // Disable button while listening
});

// When speech is detected
recognition.addEventListener('result', (e) => {
    const transcript = e.results[0][0].transcript;
    addMessageToChatBox(transcript, 'user');
    handleResponse(transcript);
});

// When recognition ends
recognition.addEventListener('end', () => {
    wave.style.animationPlayState = 'paused'; // Stop the pulse animation
    startBtn.disabled = false; // Re-enable the button
});

// Command handling logic
function handleResponse(transcript) {
    try {
        // Check for dark mode commands
        if (transcript.includes('dark mode')) {
            document.body.classList.add('dark-mode');
            document.body.classList.remove('light-mode');
            addMessageToChatBox("Switched to dark mode.", 'assistant');
            speakResponse("Switched to dark mode.");
            return; // Exit the function after handling the command
        } else if (transcript.includes('light mode')) {
            document.body.classList.add('light-mode');
            document.body.classList.remove('dark-mode');
            addMessageToChatBox("Switched to light mode.", 'assistant');
            speakResponse("Switched to light mode.");
            return; // Exit the function after handling the command
        }

        // Send request to FastAPI backend
        fetch('http://localhost:8000/process_query', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ query: transcript })
        })
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.error('Error:', data.error);
                addMessageToChatBox(data.error, 'assistant');
            } else {
                const responseText = data.response; // Define responseText variable
                responseDiv.innerHTML = responseText; // Update the response div
                addMessageToChatBox (responseText, 'assistant');
                speakResponse(responseText);
            }
        })
        .catch(error => console.error('Error:', error));
    } catch (error) {
        console.error('Error handling response:', error);
    }
}

// Text-to-Speech function
function speakResponse(text) {
    if (!text) {
        console.error("No text to speak");
        return;
    }

    try {
        const utterance = new SpeechSynthesisUtterance(text);

        if (!window.preferredVoice && !voices.length) {
            console.error("No voices available");
            return;
        }

        utterance.voice = window.preferredVoice || voices[1]; // Use the preferred voice or fallback
        utterance.pitch = 1.2; // Slightly higher pitch for a more natural female tone
        utterance.rate = 0.9; // Normal speed
        utterance.volume = 1; // Maximum volume

        utterance.onstart = function(event) {
            console.log("Speech started");
        };

        utterance.onend = function(event) {
            console.log("Speech ended");
        };

        utterance.onerror = function(event) {
            console.error("Speech error", event);
        };

        console.log("Speaking response:");
        console.log(text);
        console.log(utterance);
        console.log(window.speechSynthesis.pending);
        console.log(window.speechSynthesis.speaking);
        console.log(window.speechSynthesis.paused);

        // Add a 1-second delay before speaking the text
        setTimeout(() => {
            window.speechSynthesis.speak(utterance);
        }, 1000);
    } catch (error) {
        console.error("Error speaking response:", error);
    }
}

// Function to greet the user according to the time
function greetUser () {
    const currentTime = new Date().getHours();
    let greeting = '';

    if (currentTime < 12) {
        greeting = 'Good morning!';
    } else if (currentTime < 18) {
        greeting = 'Good afternoon!';
    } else {
        greeting = 'Good evening!';
    }

    addMessageToChatBox(greeting, 'assistant');
    speakResponse(greeting);
}

greetUser ();

// Load voices when the page is ready
window.addEventListener('load', () => {
    loadVoices();
    // Listen for voices changed event
    speechSynthesis.onvoiceschanged = loadVoices;
    document.getElementById('theme-toggle').addEventListener('click', function() {
        document.body.classList.toggle('dark-mode');
        // Add theme toggle functionality here
    });
});

